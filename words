#!/bin/bash
# Print random words to stdout

DICTIONARY="/usr/share/dict/words"

help() # {{{1
{
   cat <<EOT
words [ -p prefixes ]* [ dict-path ]

Print a random word from the system dictionary.

If the -p option is given, only words starting with its argument will be
displayed, ie.,
   $ words -p \$prefixes
   displays only words matching /^\$prefixes.*/
Multiple -p strings can be given, to select several valid prefixes.

The argument dict-path specifies the path to the system dictionary, in case it
isn't in its default location.

Press '<Enter>' for more words.
Quit with 'q'.
EOT

} 

construct_dict() # {{{1
{
   prefixes=$@
   dict=$( mktemp -t words.XXX )

   if [[ -z "$prefixes" ]]; then
      return 1
   fi

   for prefix in ${prefixes[@]}
   do
      grep "^$prefix" $DICTIONARY >> $dict
   done

   DICTIONARY=$dict
}

# }}}1

declare -a prefixes
last_index=0

# Read options
while getopts "p:h" opt
do
	case $opt in

      p  ) prefixes[$last_index]=$OPTARG; last_index=$((last_index+1)) ;;
      h  ) help && exit 0 ;;
		\? ) echo 'usage: words [ -p prefix ]* [ dict-path ]'
 		     exit 1
	esac
done
shift $(($OPTIND-1))

# Set the dictionary to use
if [[ $# -eq 1 ]]; then
   DICTIONARY="$1"
	echo "Using $DICTIONARY as system dictionary"
fi

if [[ ! -e "$DICTIONARY" ]]; then
   exit 2
fi

construct_dict $prefixes

# Read and display input

LINE_MAX=$( wc -l $DICTIONARY | awk '{print $1}' )
IN=""

echo

while [ "${IN::1}" != "q" ]
do
   LINE_NUM=$(( (($RANDOM & 3)<<30 | $RANDOM<<15 | $RANDOM ) % LINE_MAX + 1 ))
   LINE=$( head -n $LINE_NUM $DICTIONARY | tail -n 1 )

   echo $LINE
	
   echo -n "> "
   read IN
done
